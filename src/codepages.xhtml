<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0 plus SVG 1.1//EN" "http://www.w3.org/2002/04/xhtml-math-svg/xhtml-math-svg.dtd"[

	<!ENTITY nbsp "&#160;">
	<!ENTITY t "&#160;&#160;&#160;&#160;">
	
]>

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml http://www.w3.org/MarkUp/SCHEMA/xhtml11.xsd" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

<head>
	<title>FreeBASIC, кракозябры, кодировки и кириллица</title>
	<meta name="description" content="Как использовать кодировки и заставить FreeBASIC выводить и печатать в консоли русские буквы" />
	<meta name="keywords" content="freebasic, кодировки, кириллица, русские символы, codepage, cp866, cp1251, статьи для новичков" />
	
	<link href="/styles.css" type="text/css" rel="stylesheet" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<style type="text/css">
		table{
			margin: 1em 0 1em 0;
			border: 1px solid #CCCCCC;
			border-collapse: collapse;
		}
		td,th{
			border: solid 1px #CCCCCC;
		}
	</style>
	
</head>

<body>

<ul class="navbar">
	<li><a href="/">Главная</a></li>
	<li><a href="/src/">Статьи</a></li>
	<li><a href="/code/">Проекты</a></li>
	<li><a href="/books/">Учебник</a></li>
	<li><a href="/links.xhtml">Ссылки</a></li>
	<li><a href="/about.xhtml">О сайте</a></li>
</ul>


<h1>FreeBASIC, кракозябры, кодировки и кириллица</h1>

<p><span class="postername">Эрик Замабувараев‐Ёмолкуу</span> <span class="date">21.01.2017 17:27:58</span></p>

<p>Самый часто задаваемый вопрос новичков по фрибейсику: как выводить кириллицу и русские буквы.</p>

<ol class="contents">
	<li><a href="#c1">Кодировки</a></li>
	<li><a href="#c2">Правильный способ</a></li>
	<li><a href="#c3">Неправильные способы</a></li>
</ol>

<h2><a id="c1">Кодировки</a></h2>

<p>Настоящей проблемой при локализации всегда были операции с различными наборами символов. Годами, кодируя текстовые строки как последовательности однобайтовых символов с нулём в конце, большинство программистов так к этому привыкло, что это стало чуть ли не второй их натурой. Графическое начертание символа определялось его номером по специальной кодировочной таблице. Таким образом можно было представить 256 символов. Первые 127 символов у таких таблиц обычно совпадали, остальные менялись в зависимости языка и локализации. Таких таблиц было создано очень много. Во времена DOS для кириллицы корпорация Microsoft создала кодировку 866, с появлением Windows родилась кодировка 1251. Это значит, символ с номером больше 127 в разных кодировках выглядел по‐разному.</p>

<p>Всё изменилось, когда пришёл юникод. Юникод предложил единую таблицу соответствия графического начертания для всех символов в мире. Таблица юникода содержит очень много символов и для её представления в тексте также придумали специальные юникодные кодировки: UTF-8, UTF-16, UTF-32 и так далее.</p>

<p>Windows NT в лицах 2000, XP, Vista, 7, 8 и 10 — операционные системы целиком и полностью построенные на юникоде. Все базовые функции для создания окон, вывода текста, операций со строками и так далее ожидают передачи юникодных строк. Если какой‐то функции Windows передаётся ANSI‐строка, она сначала преобразуется в юникод и лишь потом передаётся операционной системе. Если ты ждёшь результата функции в виде ANSI‐строки, то операционная система преобразует строку перед возвратом в приложение из юникода в ANSI. Все эти операции протекают скрытно, но на них тратятся лишнее время и память.</p>

<p>Например, функция WriteConsole, вызываемая с ANSI‐строками, должна, выделив дополнительные блоки памяти (в стандартной куче процесса) преобразовать эти строки в юникод и, сохранив результат в выделенных блоках памяти, вызвать юникодную версию WriteConsole. Для функций, заполняющих строками выделенные буферы прежде чем программа сможет их обработать, системе нужно преобразовать строки из юникодных в ANSI. Из‐за этого твоё приложение потребует больше памяти и будет работать медленнее. Поэтому гораздо эффективнее разрабатывать программу с самого начала ориентируясь на юникод.</p>

<p>FreeBASIC как наследник Microsoft QuickBasic по умолчанию считает, что исходный текст написан в кодировке DOS. При выводе русского текста на консоль появляются кракозябры из‐за того, что один и тот же символ имеет разные коды в кодировках 866 и 1251. Эту проблему можно решить несколькими способами.</p>


<h2><a id="c2">Правильный способ</a></h2>

<p>Необходимо раз и навсегда отказаться от однобайтных кодировок и перейти на юникод. На дворе двадцать первый век, а люди до сих пор сидят в мире 1251 или 866.</p>

<p>Чтобы перейти на юникод, необходимо:</p>

<ul>
	<li>сохранить файл исходного кода в юникоде, используя кодировку UTF-8 или UTF-16 (если используется FBEdit — то UTF-16);</li>
	<li>если будут использоваться WinAPI, то объявить константу <code>#define unicode</code> перед подключением заголовочного файла windows.bi;</li>
	<li>прекратить использование типа <code>String</code> для строк и вместо него использовать <code>WString</code>.</li>
</ul>

<p>Если с первыми двумя условиями всё просто, то последний пункт может вызвать некоторые сложности, например, придётся самостоятельно выделять и очищать память для строк.</p>

<p>Строка <code>WString</code> — это не то же самое, что <code>String</code> с юникодом. Разница между ними представлена в таблице.</p>

<table>
	<tr>
		<th><p></p></th>
		<th><p>Тип String</p></th>
		<th><p>Тип WString</p></th>
	</tr>
	<tr>
		<td><p>Юникод</p></td>
		<td><p>Может содержать юникод только в кодировке UTF-8.</p></td>
		<td><p>Полностью юникодная.</p></td>
	</tr>
	<tr>
		<td><p>Внутреннее представление</p></td>
		<td><p>Объект, содержащий внутри себя длину строки, количество выделенной памяти и указатель на память, где хранится массив символов с дополнительным нулевым символом.</p></td>
		<td><p>Статический массив символов, заканчивающийся нулевым символом; либо указатель на этот массив.</p></td>
	</tr>
	<tr>
		<td><p>Размер одного символа</p></td>
		<td><p>1 байт.</p></td>
		<td><p>2 байта на Windows, суррогатные пары не учитываются.</p></td>
	</tr>
	<tr>
		<td>Создание</td>
		<td>
			<p>Создание пустой строки, в строке содержится только нулевой символ:<br />
				<code>Dim s As String</code></p>
			<p>Создание строки вместе с инициализацией литералом:<br />
				<code>Dim s As String = &quot;Hello World&quot;</code></p>
		</td>
		<td>
			<p>Можно создать в виде строки фиксированной длины:<br />
				<code>Dim s As WString * (количество символов + 1 на нулевой)</code></p>
			<p>Либо в виде указателя на адрес в памяти:<br />
				<code>Dim s As WString Ptr = Allocate((количество символов + 1 на нулевой) * SizeOf(WString))</code></p>
			<p>При этом нужно всегда учитывать нулевой символ, не забывая выделять память под него.</p>
		</td>
	</tr>
	<tr>
		<td><p>Автоматическое вычисление длины строки при создании</p></td>
		<td><p>Вычисляется автоматически.</p></td>
		<td><p>Требуется вычислять самостоятельно.</p></td>
	</tr>
	<tr>
		<td><p>Накладные расходы</p></td>
		<td>
			<p>Каждый раз при создании и присвоении строки память выделяется динамически из кучи, при выполнении программы.</p>
			<p>При уничтожении строки должна освобождаться память из кучи.</p>
		</td>
		<td>
			<p>Память для строк фиксированного размера выделяется статически, на этапе компиляции программы.</p>
			<p>Статическая память не трубет очистки и освобождения.</p>
		</td>
	</tr>
</table>

<p>Строки <code>String</code> просты в использовании и прекрасны. По сути этот тип скрывает в себе строку <code>ZString</code> вместе с её длиной, а компилятор берёт на себя всю грязную работу по выделению и освобождению памяти. Но они обманчивы и таят в себе ловушку однобайтной кодировки.</p>

<p>Также с консолью связано множество мифов, например:</p>

<table>
	<tr>
		<th><p>Миф</p></th>
		<th><p>Правда</p></th>
	</tr>
	<tr>
		<td><p>Консоль и консольные программы — это DOS‐программы</p></td>
		<td><p>Консоль — это полноценное Windows‐приложение. С точки зрения загрузчика программ, консольные приложения от графических отличаются всего лишь специальным значением в исполняемом файле.</p></td>
	</tr>
	<tr>
		<td><p>Консоль существует в кодировке 866 или 1251</p></td>
		<td><p>Консоль полностью поддерживает юникод. Данный миф связан с тем, что юникод не очень хорошо поддерживается в командных файлах (*.cmd и *.bat), которые приходится использовать в неюникодной кодировке.</p></td>
	</tr>

</table>

<h2><a id="c3">Неправильные способы</a></h2>

<p>К неправильным способам вывода кириллицы на консоль является попытки изменения кодовой страницы консоли, например, такими способами:</p>

<p class="codebox"><span>Код</span> <span>FreeBASIC</span><br /><code>
<span class="keyword">Exec</span>(&quot;mode&quot;, &quot;con cp select=866&quot;)
</code></p>

<p></p>

<p>Также неправильно перекодировать строки из кодировки 866 в 1251 или наоборот с помощью функций типа <code>CharToOem</code> или <code>AnsiToOem</code>.</p>

<p>Ещё более неправильным способом вывода русских букв является попытка смены шрифта консоли, сохранение исходника в кодировке 866 или самостоятельное перекодирование символов.</p>


<h2>Поделись ссылочкой в социальных сетях</h2>
<div id="vk_share_button"></div>


<hr />

<p class="footer">Сайт создан по технологии XHTML</p>

<p class="footer">
	
	<span id="pLiveInternet"></span>
	
	<a href="http://wscatalog.ru/dir/programmirovanie-na-yazyke-freebasic" title="Сайт есть в Каталоге">
		<img width="88" height="31" src="http://wscatalog.ru/knopka.png" alt="Логотип wscatalog.ru" />
	</a>
	<a href="http://gluci.ru/dir/freebasic-na-russkom" title="Необычный Каталог Сайтов">
		<img width="88" height="31" src="http://gluci.ru/88x31.png" alt="Логотип Глюки" />
	</a> 
</p>

<script type="text/javascript" src="https://vk.com/js/api/share.js?93" charset="windows-1251"></script>
<script type="text/javascript">var docUrl=document.URL.toString();document.getElementById("vk_share_button").innerHTML=VK.Share.button(docUrl, {type: "round"});</script>


<script type="text/javascript">var idL=document.getElementById("pLiveInternet");var idA=document.createElement("a");idA.href="//www.liveinternet.ru/stat/freebasic.su";idA.title="Счётчик посещений LiveInternet";var idImg=document.createElement("img");idImg.src="//counter.yadro.ru/hit?t44."+Math.round(1+18*Math.random())+";r"+escape(document.referrer)+((typeof(screen)=="undefined")?"":";s"+screen.width+"*"+screen.height+"*"+(screen.colorDepth?screen.colorDepth:screen.pixelDepth))+";u"+escape(docUrl)+";"+Math.random();idImg.alt="Логотип LiveInternet";idA.appendChild(idImg);idL.appendChild(idA);</script>


</body></html>